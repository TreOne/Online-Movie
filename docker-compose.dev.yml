version: '3'

services:
  nginx:
    build: deploy/nginx
    volumes:
      - static_volume:/home/app/admin_panel/static
      - media_volume:/home/app/admin_panel/media
    ports:
      - "80:80"
    depends_on:
      - admin_panel
      - api
      - auth
    networks:
      - movie_network

  admin_panel:
    build:
      context: .
      dockerfile: deploy/admin_panel/dev.Dockerfile
    volumes:
      - static_volume:/home/app/admin_panel/static
      - media_volume:/home/app/admin_panel/media
    env_file:
      - deploy/admin_panel/example.env
    depends_on:
      - db
    expose:
      - 8000
    networks:
      - movie_network

  db:
    image: postgres:14.1-alpine3.15
    volumes:
      - postgres_data:/var/lib/postgresql/data/
      - ./deploy/db/sql_scripts/:/docker-entrypoint-initdb.d/
    ports:
      - "5432:5432"
    env_file:
      - deploy/db/example.env
    expose:
      - 5432
    networks:
      - movie_network

  redis:
    image: redis:6.2.6-alpine
    expose:
      - 6379
    ports:
      - "6379:6379"
    networks:
      - movie_network

  auth:
    build:
      context: .
      dockerfile: deploy/auth/dev.Dockerfile
    env_file:
      - deploy/auth/example.env
    expose:
      - 5000
    volumes:
      - ./src/auth_api:/app/auth_api
      - ./src/auth_api/migrations:/app/migrations
    depends_on:
      - authdb
      - authredis
    networks:
      - movie_network

  authdb:
    image: postgres:14.1-alpine3.15
    volumes:
      - auth_postgres_data:/var/lib/postgresql/data/
    env_file:
      - deploy/auth/example.env
    expose:
      - 5432
    ports:
      - "15432:5432"
    networks:
      - movie_network

  authredis:
    image: redis:6.2.6-alpine
    expose:
      - 6379
    ports:
      - "16379:6379"
    networks:
      - movie_network

  elastic:
    image: elasticsearch:7.7.0
    environment:
      - cluster.name=movies-elasticsearch-cluster
      - network.host=0.0.0.0
      - bootstrap.memory_lock=true
      - discovery.type=single-node
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    expose:
      - 9200
    networks:
      - movie_network

  ps_to_es:
    build:
      context: .
      dockerfile: deploy/ps_to_es/Dockerfile
    env_file:
      - deploy/ps_to_es/example.env
    depends_on:
      - db
      - elastic
    networks:
      - movie_network

  api:
    build:
      context: .
      dockerfile: deploy/api/Dockerfile
    environment:
      - PROJECT_NAME=movies
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - ELASTIC_HOST=http://elastic
      - ELASTIC_PORT=9200
    depends_on:
      - redis
      - elastic
    expose:
      - 8000
    networks:
      - movie_network

  ugc_service:
    build:
      context: .
      dockerfile: deploy/ugc_service/Dockerfile
    env_file:
      - deploy/ugc_service/example.env
    volumes:
      - ./src/ugc_service:/home/app/src
    depends_on:
      - kafka
    expose:
      - 8000
    ports:
      - "8000:8000"
    networks:
      - movie_network

  kafka:
    image: bitnami/kafka:2.8.0
    expose:
      - 9092
    environment:
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      ALLOW_PLAINTEXT_LISTENER: "yes"
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "true"
    depends_on:
      - zookeeper
    volumes:
      - kafka_data:/bitnami/kafka
    networks:
      - movie_network

  zookeeper:
    image: bitnami/zookeeper:3.7.0
    expose:
      - 2181
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    volumes:
      - zookeeper_data:/bitnami/zookeeper
    networks:
      - movie_network

  ### Опциональные сервисы
  kibana:
    image: kibana:7.7.0
    environment:
      ELASTICSEARCH_URL: http://elastic:9200
      ELASTICSEARCH_HOSTS: '["http://elastic:9200"]'
      SERVER_BASEPATH: /kibana
    depends_on:
      - elastic
    expose:
      - 5601
    networks:
      - movie_network

  jaeger:
    image: jaegertracing/all-in-one:latest
    expose:
      - 16686  # jaeger-ui
      - 6831  # udp
    ports:
      - "16686:16686"
      - "6831:6831"
    networks:
      - movie_network

  kafdrop:
    image: obsidiandynamics/kafdrop
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka:9092"
    depends_on:
      - kafka
    networks:
      - movie_network

volumes:
  postgres_data:
  auth_postgres_data:
  elasticsearch_data:
  zookeeper_data:
  kafka_data:
  static_volume:
  media_volume:

networks:
  movie_network:
    driver: bridge
